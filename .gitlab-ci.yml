workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_BRANCH'

.sceduled-pipeline: &scheduled-pipeline
  if: '$CI_PIPELINE_SOURCE == "schedule"'
  when: on_success
.non-sceduled-pipeline: &non-scheduled-pipeline
  if: '$CI_PIPELINE_SOURCE == "schedule"'
  when: never

stages:
  - versioning
  - build
  - release
  - report

variables:
  DOCKER_VERSION: 19.03.15

.use-docker-in-docker:
  image: docker:${DOCKER_VERSION}-dind
  services:
    - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

.node-cache:
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - node_modules/

.default-retry:
  retry:
    max: 2  # This is confusing but this means "3 runs at max".
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure
      - job_execution_timeout
      - stuck_or_timeout_failure

.semantic-release:
  image: node:lts
  extends:
    - .node-cache
    - .default-retry
  before_script:
    - npm i -g semantic-release @semantic-release/gitlab @semantic-release/exec
  script:
    - |
      if [[ ! -f VERSION ]]; then
        echo "No hay nueva version"
        exit 1;
      fi
  rules:
    - <<: *non-scheduled-pipeline
    - when: on_success

semantic-release-dry:
  stage: versioning
  variables:
    SEMANTIC_RELEASE_REGEX: (?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?
  script:
    - |
      cat << EOF >> script.sh
      DRY_SEMANTIC_CMD='semantic-release --dry-run --no-ci | tee | grep "Published release" | grep -Po \${SEMANTIC_RELEASE_REGEX}'
      echo "Executing \$DRY_SEMANTIC_CMD"
      __SEMANTIC_RELEASE_NEXT_VERSION=\$(eval \$DRY_SEMANTIC_CMD)
      __last_exit_code=\$?
      if [ \$__last_exit_code -ne 0 ]; then
        echo "Exit code = \$__last_exit_code"
        exit 0;
      fi
      echo "Writing next version to file"
      echo -n \$__SEMANTIC_RELEASE_NEXT_VERSION > VERSION
      EOF
    - !reference [.semantic-release, script]
  artifacts:
    paths:
      - VERSION

semantic-release:
  stage: release
  script:
    - semantic-release
    - !reference [.semantic-release, script]
  artifacts:
    paths:
      - VERSION
  rules:
    - if: '$CI_COMMIT_BRANCH != "main"'
      when: manual
    - when: on_success


build docker image:
  stage: build
  extends:
    - .default-retry
    - .use-docker-in-docker
  script:
    - sh scripts/update_version.sh
    - export DOCKER_IMAGE_TAG=$(cat VERSION)
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build  -t "$CI_REGISTRY_IMAGE:$(cat VERSION)" .
    - |
      echo "Building docker image: ${CI_REGISTRY_IMAGE}:{DOCKER_IMAGE_TAG}"
    - docker push "$CI_REGISTRY_IMAGE:${DOCKER_IMAGE_TAG}"
    - |
      if [ "$CI_COMMIT_BRANCH" == "main" ] then
        docker tag "$CI_REGISTRY_IMAGE:${DOCKER_IMAGE_TAG}" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
  rules:
    - <<: *non-scheduled-pipeline
    - when: on_success
      
scheduled_report:
  stage: report
  image: $CI_REGISTRY_IMAGE:latest
  script:
    - cat $CANALYZER_APPSETTINGS_PATH > appsettings.json
    - canalyzer -o report -f markdown
    - markdown_to_html report.md  --css styles.css --with-summary --premailer -o html_report
    - wkhtmltopdf html_report.html report.pdf
    - canalyzer_smtp html_report_summary.html report.md -a report.pdf
  rules:
    - <<: *scheduled-pipeline